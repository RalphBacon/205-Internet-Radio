; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
; https://docs.platformio.org/en/latest/projectconf/section_env.html

[platformio]
default_envs = debug
;default_envs = stable
;default_envs = sendlive

[common]
platform = espressif32 			;platform = https://github.com/platformio/platform-espressif32.git
build_flags = 
	-D=${PIOENV} 
	-DBOARD_HAS_PSRAM 				; only for WROVER boards
    -mfix-esp32-psram-cache-issue 	; fix for corruption of PSRAM

; SPIFFS replacement (LittleFS)
lib_deps_external = https://github.com/lorol/LITTLEFS.git
;lib_deps= lorol/LittleFS_esp32@^1.0
; LittleFS partition vs program memory described in .csv
board_build.partitions =  no_ota.csv
board_build.filesystem = littlefs

;=======================================================================================
; =============================== STABLE     STABLE     STABLE =========================
[env:stable]
; =============================== STABLE     STABLE     STABLE =========================
;=======================================================================================
platform = ${common.platform}
board = esp32dev
framework = arduino
board_build.f_flash = 40000000L
board_build.f_cpu = 240000000L
board_build.flash_mode = qio

build_flags = 
	${common.build_flags}
	-DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG 	; debugging message level (see below)

monitor_speed=115200
upload_speed=921600
upload_port = COM7

build_type = release
lib_deps = ${common.lib_deps_external}
board_build.partitions =  no_ota.csv
board_build.filesystem = littlefs
extra_scripts = 
	replace_fs.py


;=======================================================================================
; =============================== RELEASE   RELEASE    RELEASE =========================
[env:sendlive]
; =============================== RELEASE   RELEASE    RELEASE =========================
;=======================================================================================
platform = ${common.platform}
board = esp32dev
framework = arduino
board_build.f_flash = 40000000L
board_build.f_cpu = 240000000L
board_build.flash_mode = qio

build_flags = 
	${common.build_flags}
	-DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_VERBOSE 	; debugging message level (see below)

monitor_speed=115200
upload_speed=921600
upload_port = COM4

build_type = release
lib_deps = ${common.lib_deps_external}
board_build.partitions =  no_ota.csv
board_build.filesystem = littlefs
extra_scripts = 
;https://github.com/sblantipodi/platformio_version_increment
	pre:buildscript_versioning.py,	; this will increment the version
	replace_fs.py


;=======================================================================================
; =============================== DEBUG      DEBUG      DEBUG ==========================
[env:debug]
; =============================== DEBUG      DEBUG      DEBUG ==========================
;=======================================================================================
platform = ${common.platform}
board = esp32dev
framework = arduino
board_build.f_flash = 40000000L
board_build.f_cpu = 240000000L ; this may not be honoured except in ESP-IDF
board_build.flash_mode = dio

; ARDUHAL_LOG_LEVEL +
;	_NONE       (0) // Stumm. Nada. On your own.
;	_ERROR      (1) // Usually fatal errors
;	_WARN       (2) // Only when things go wrong
;	_INFO       (3) // Useful just to see it working
;	_DEBUG      (4) // Debugging programming
;	_VERBOSE    (5) // Every message

build_flags = 
	${common.build_flags}
	-DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG 	; debugging message level (see above)

monitor_speed=115200
upload_speed=921600
upload_port = COM7

build_type = debug	; ensure we can trace the code but not very relevant here (yet)
lib_deps = ${common.lib_deps_external}
board_build.partitions =  no_ota.csv
board_build.filesystem = littlefs
extra_scripts = replace_fs.py